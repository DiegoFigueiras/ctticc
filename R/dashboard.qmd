---
title: "CTT ICCs"
format: 
  dashboard:
    nav-buttons: 
      - github 
    theme: cerulean
    logo: https://i.pinimg.com/originals/4c/09/e6/4c09e608d548b4abf525f3bb2b215c68.png
server: shiny
---

## Row {height=20%}

### Column {width=50%}

The Item Characteristic Curves are replotted each time you select or de-select an item. 

You may therefore be interested in gaining visual feedback of item functioning within unique sets of items (e.g,. this tool should be beneficial to those considering item retention or deletion decisions).

### Column {width=50%}

```{r}
#| content: valuebox
#| title: "Number of Items:"

list(
  icon = "backpack-fill",
  color = "primary",
  value = 5 # textOutput(nrow(data))
)
```

## Row {height=80%}

```{r}
#| context: server

library(psych)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(plotly)
library(shiny)

ctticc <- function(data, items, plot="together", nrow=2, ncol=3) {
  pseudob <- data.frame(qnorm(colMeans(data, na.rm=TRUE)))*-1
  ahat <- function(x) {
    r <- (((2.71828)^x)-(1/(2.71828)^x))/(2.71828-(2.71828)^x)
    ((((0.51+(0.02*abs(pseudob))+(0.301*pseudob^2))*x)+((0.57-(0.009*abs(pseudob))+(0.19*pseudob^2))*r))*1.71633)
  }

  alphas <- psych::alpha(data, check.keys = FALSE)
  citcs <- data.frame(alphas$item.stats$r.drop)
  pseudoA <- data.frame(ahat(citcs))
  pseudoB <- -0.000002895614 + (1.535589 * pseudob)
  df <- as.data.frame(cbind(citcs, pseudoA, pseudoB))
  colnames(df) <- c("CITC", "PseudoA", "PseudoB")
  c <- 0
  df$inum <- row.names(df)

  eq <- function(x, pseudoa, pseudob) {
    c + ((1-c)*(1/(1+2.71828^(-1.7*(pseudoa*(x-pseudob))))))
  }

  if (plot == "together") {
    fun <- function(x, PseudoA, PseudoB) {
      (1 / (1 + 2.71828^(-1.7 * (PseudoA * (x - PseudoB)))))
    }

    df_selected <- df[items, ]
    p <- df_selected %>%
      crossing(x = seq(-4, 4, .1)) %>%
      mutate(y = fun(x, PseudoA, PseudoB)) %>%
      ggplot(aes(x, y, color = inum)) +
      ylim(0, 1) +
      geom_line(linewidth = 1.25) +
      scale_x_continuous(limits = c(-4, 4), labels = c("Low Test Score", "", "Average Test Score", "", "High Test Score")) +
      labs(y = "p(1.0)", x = "", fill=guide_legend(title="items"))  ## not working

    q <- ggplotly(p, tooltip = c("colour"))
    return(q)
  }

  return(NULL)
}

data <- reactive({
    req(input$file)
    read.csv(input$file$datapath)
  })

observe({
    req(data())
    updateCheckboxGroupInput(session, "items", choices = colnames(data()), selected = colnames(data()))
  })

  observeEvent(input$deselect_all, {
    updateCheckboxGroupInput(session, "items", choices = colnames(data()), selected = character(0))
  })

  selectedData <- reactive({
    req(data())
    data()[, input$items, drop = FALSE]
  })

  output$plot1 <- renderPlotly({
    req(selectedData())
    ctticc(selectedData(), items = input$items, plot = "together")
  })

```

```{r}
#| title: Item Characteristic Curves
plotOutput("plot1")
```

## {.sidebar}

Your data file should reflect **only** binary item responses (scored 1 and 0; NAs *are permitted*). The data file should be structured such that each column represents an item and each row represents a respondent.

```{r}

fileInput("file", "Upload CSV File", accept = ".csv")
actionButton("deselect_all", "Deselect All")
checkboxGroupInput("items", "Select Items", choices = NULL)

```
